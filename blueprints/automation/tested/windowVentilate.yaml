blueprint:
  name: Lüften-Erinnerung – einfach (pro Empfänger)
  description: >
    Erinnert eine Person ans Lüften, wenn seit dem Zeitstempel in einem input_datetime
    länger als N Stunden nicht gelüftet wurde. Benachrichtigt nur, wenn die Person zuhause ist
    und die Fenster-Zone aktuell geschlossen ist. Der Zeitstempel wird von einer separaten
    Automation gesetzt (z. B. „Lüften – Zeitstempel nach X Min offen“).
  domain: automation

  input:
    window_entity:
      name: Fenster-Gruppe ODER einzelner Fensterkontakt
      selector:
        entity:
          multiple: false
          filter:
            - domain: binary_sensor
            - domain: group

    last_ventilated:
      name: input_datetime – Zeitpunkt letzte ausreichende Lüftung (mit Datum+Zeit!)
      selector:
        entity:
          domain: input_datetime

    remind_after_hours:
      name: Erinnern nach so vielen Stunden ohne Lüften
      default: 6
      selector:
        number:
          min: 1
          max: 72
          step: 1
          unit_of_measurement: "h"

    check_every_minutes:
      name: Prüf-/Erinnerungsintervall (Minuten, ≤60)
      default: 30
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: "min"

    active_start:
      name: Aktive Zeit – Start
      default: "08:00:00"
      selector: { time: {} }

    active_end:
      name: Aktive Zeit – Ende
      default: "21:00:00"
      selector: { time: {} }

    presence_entity:
      name: Präsenz der Zielperson (person/device_tracker/group/binary_sensor)
      selector:
        entity:
          multiple: false
          filter:
            - domain: person
            - domain: device_tracker
            - domain: group
            - domain: binary_sensor

    notify_service:
      name: Notify-Service (z. B. notify.mobile_app_iphone_von_niklas)
      selector: { text: {} }

    debug_enable:
      name: Debug-Log (optional)
      default: false
      selector: { boolean: {} }

mode: restart
max_exceeded: silent

variables:
  _ent: !input window_entity
  _dt:  !input last_ventilated
  _after_h: !input remind_after_hours
  _interval: !input check_every_minutes
  _start: !input active_start
  _end:   !input active_end
  _presence: !input presence_entity
  _notify: !input notify_service
  _dbg: !input debug_enable

trigger:
  # Einmal pro Minute prüfen; wir filtern später auf das eingestellte Intervall
  - platform: time_pattern
    minutes: "/1"

  # Optional: Direkt nach Aktualisierung des Zeitstempels eine Prüfung erlauben
  - platform: state
    entity_id: !input last_ventilated

condition: []

action:
  # nur jede _interval-te Minute laufen lassen
  - condition: template
    value_template: "{{ (now().minute % (_interval | int)) == 0 }}"

  # aktives Zeitfenster (auch über Mitternacht)
  - condition: template
    value_template: >
      {% set nowt = now().strftime('%H:%M:%S') %}
      {% if _start <= _end %}
        {{ _start <= nowt <= _end }}
      {% else %}
        {{ nowt >= _start or nowt <= _end }}
      {% endif %}

  # Fenster-Zone muss aktuell geschlossen sein
  - variables:
      _st: "{{ states(_ent) | lower }}"
      _closed_now: "{{ _st in ['off','closed'] }}"
  - condition: template
    value_template: "{{ _closed_now }}"

  # Stunden seit letzter Lüftung berechnen
  - variables:
      _last_str: "{{ states(_dt) }}"
      _hours_since: >
        {% if _last_str in ['unknown','unavailable','none',''] %}
          {{ 999.0 }}
        {% else %}
          {{ ((now() - as_datetime(_last_str)).total_seconds() / 3600) | float }}
        {% endif %}

  # Mindestzeit ohne Lüften überschritten?
  - condition: template
    value_template: "{{ (_hours_since | float(999)) >= (_after_h | float) }}"

  # Nur benachrichtigen, wenn die Zielperson zuhause ist
  - variables:
      _p_state: "{{ states(_presence) | lower }}"
      _p_domain: "{{ _presence.split('.')[0] if ('.' in _presence) else '' }}"
      _is_home: >
        {% if _p_domain in ['person','device_tracker','group'] %}
          {{ _p_state in ['home','on'] }}
        {% elif _p_domain == 'binary_sensor' %}
          {{ _p_state == 'on' }}
        {% else %}
          {{ _p_state in ['home','on'] }}
        {% endif %}
  - condition: template
    value_template: "{{ _is_home }}"

  # Nachricht senden
  - variables:
      _title: "Bitte lüften – {{ state_attr(_ent, 'friendly_name') or 'Fensterzone' }}"
      _msg: "Seit {{ (_hours_since | float) | round(1) }} h nicht gelüftet. Bitte jetzt kurz lüften."
  - service: "{{ _notify }}"
    data:
      title: "{{ _title }}"
      message: "{{ _msg }}"

  # Optionales Logging
  - if:
      - condition: template
        value_template: "{{ _dbg }}"
    then:
      - service: logbook.log
        data:
          name: "Lüften-Reminder"
          message: "Erinnerung gesendet an {{ _presence }} ({{ _notify }})"